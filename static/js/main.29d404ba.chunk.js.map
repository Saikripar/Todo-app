{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onCLick","onClick","TodoList","setTodos","test","newTodos","updatedTodos","iscomplete","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","document","getElementById"],"mappings":"0KAoEeA,MAlEf,SAAkBC,GACd,MAAyBC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAQ,IAAlE,mBAAOC,EAAP,KAAaC,EAAb,KAEMC,EAAWC,iBAAO,MAExBC,qBAAU,WACNF,EAASG,QAAQC,WAGrB,IAAMC,EAAe,SAAAC,GACjBP,EAASO,EAAEC,OAAOV,QAetB,OACI,sBAAMW,UAAU,YAAYC,SAbX,SAAAH,GACjBA,EAAEI,iBAGFhB,EAAMe,SAAS,CACXE,GAAGC,KAAKC,MAAsB,IAAhBD,KAAKE,UACnBC,KAAMjB,IAGVC,EAAS,KAIT,SAEKL,EAAME,KACH,qCACJ,uBACAoB,KAAK,OACJC,YAAY,aACXpB,MAAOC,EACToB,KAAK,OACJV,UAAU,kBACVW,SAAUd,EACVe,IAAKpB,IAIN,wBAAQQ,UAAU,mBAAlB,uBAIA,qCACA,uBACIQ,KAAK,OACJC,YAAY,gCACXpB,MAAOC,EACToB,KAAK,OACJV,UAAU,aACVW,SAAUd,EACVe,IAAKpB,IAIN,wBAAQQ,UAAU,cAAlB,4B,sBCVDa,MA1Cf,YAA8D,IAA/CC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,WAC7C,EAAuB9B,mBAAS,CAC5BgB,GAAG,KACHd,MAAM,KAFV,mBAAOD,EAAP,KAAY8B,EAAZ,KAaA,OAAG9B,EAAKe,GACG,cAAC,EAAD,CAAUf,KAAMA,EAAMa,SATZ,SAAAZ,GACjB4B,EAAW7B,EAAKe,GAAId,GACpB6B,EAAQ,CACJf,GAAI,KACJd,MAAO,QAWPyB,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACb,sBAAKrB,UAAWoB,EAAKE,WAAa,oBAAqB,WAAvD,UAIK,qBAAmBC,QAAS,kBAAKR,EAAaK,EAAKjB,KAAnD,SACKiB,EAAKb,MADAa,EAAKjB,IAGf,sBAAKH,UAAU,QAAf,UACI,cAAC,IAAD,CACAwB,QAAS,kBAAKR,EAAWI,EAAKjB,KAC9BH,UAAU,gBAEV,cAAC,IAAD,CAASwB,QAAS,kBAAKN,EAAQ,CAACf,GAAIiB,EAAKjB,GAAId,MAAO+B,EAAKb,QACzDP,UAAU,mBAZbqB,OCwBCI,MAlDf,WACI,MAAyBtC,mBAAS,IAAlC,mBAAO2B,EAAP,KAAaY,EAAb,KAwCA,OACI,gCACI,4DACA,cAAC,EAAD,CAAUzB,SAzCF,SAAAmB,GACZ,GAAIA,EAAKb,OAAQ,QAAQoB,KAAKP,EAAKb,MAAnC,CAIA,IAAMqB,EAAQ,CAAIR,GAAJ,mBAAaN,IAE3BY,EAASE,OAmCL,cAAC,EAAD,CAAMd,MAAOA,EAAOC,aAfP,SAAAZ,GACjB,IAAI0B,EAAef,EAAMK,KAAI,SAAAC,GAIzB,OAHGA,EAAKjB,KAAOA,IACXiB,EAAKU,YAAcV,EAAKE,YAErBF,KAEXM,EAASG,IAQ2Cb,WAtBrC,SAAAb,GACf,IAAM4B,EAAY,YAAIjB,GAAOkB,QAAO,SAAAZ,GAAI,OAAIA,EAAKjB,KAAOA,KAExDuB,EAASK,IAmBmEd,WA/B7D,SAACgB,EAAQC,GACpBA,EAAS3B,OAAQ,QAAQoB,KAAKO,EAAS3B,OAG9CmB,GAAS,SAAAS,GAAI,OAAIA,EAAKhB,KAAI,SAAAiB,GAAI,OAAKA,EAAKjC,KAAO8B,EAASC,EAAWE,eCIzDC,MAdf,WAIE,OAGE,qBAAKrC,UAAU,WAAf,SAEE,cAAC,EAAD,OCXNsC,IAASC,OAAO,cAAC,EAAD,IAAOC,SAASC,eAAe,W","file":"static/js/main.29d404ba.chunk.js","sourcesContent":["import React , {useState, useEffect, useRef} from 'react'\r\n\r\nfunction TodoForm(props) {\r\n    const [input,setInput] = useState(props.edit ? props.edit.value : '');\r\n\r\n    const inputRef = useRef(null)\r\n\r\n    useEffect(()=>{\r\n        inputRef.current.focus()\r\n    })\r\n\r\n    const handleChange = e =>{\r\n        setInput(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = e =>{\r\n        e.preventDefault();\r\n\r\n\r\n        props.onSubmit({\r\n            id:Math.floor(Math.random() * 10000),\r\n            text: input\r\n        });\r\n\r\n        setInput('');\r\n\r\n    };\r\n    return (\r\n        <form className=\"todo-form\" onSubmit={handleSubmit}>\r\n\r\n            {props.edit ? ( \r\n                <>\r\n            <input \r\n            type=\"text\"\r\n             placeholder=\"Add a todo\"\r\n              value={input} \r\n            name=\"text\"\r\n             className=\"todo-input edit\"\r\n             onChange={handleChange}\r\n             ref={inputRef}\r\n\r\n            />\r\n\r\n            <button className=\"todo-button edit\">Update</button>\r\n            </>\r\n            ) :\r\n            (\r\n            <>\r\n            <input \r\n                type=\"text\"\r\n                 placeholder=\"Add a todo 🖊️\"\r\n                  value={input} \r\n                name=\"text\"\r\n                 className=\"todo-input\"\r\n                 onChange={handleChange}\r\n                 ref={inputRef}\r\n    \r\n                />\r\n    \r\n                <button className=\"todo-button\">Add todo</button>\r\n                </>\r\n                )\r\n        }\r\n            \r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TodoForm\r\n","import React , {useState} from 'react';\r\nimport TodoForm from './TodoForm';\r\n\r\nimport {RiCloseCircleLine} from 'react-icons/ri';\r\nimport {TiEdit} from 'react-icons/ti';\r\n\r\n\r\nfunction Todo({todos, completeTodo, removeTodo, updateTodo}) {\r\n   const [edit,setEdit] = useState({\r\n       id:null,\r\n       value:''\r\n   });\r\n\r\n   const submitUpdate = value =>{\r\n       updateTodo(edit.id, value)\r\n       setEdit({\r\n           id: null,\r\n           value: ''\r\n       })\r\n   }\r\n\r\n   if(edit.id){\r\n       return <TodoForm edit={edit} onSubmit={submitUpdate} />\r\n   }\r\n\r\n\r\n\r\n    \r\n    return todos.map((todo, index) => (\r\n        <div className={todo.isComplete ? 'todo-row complete': 'todo-row'}\r\n         key={index}\r\n         >\r\n\r\n             <div key={todo.id} onCLick={()=> completeTodo(todo.id)}>\r\n                 {todo.text}\r\n             </div>\r\n             <div className=\"icons\">\r\n                 <RiCloseCircleLine\r\n                 onClick={()=> removeTodo(todo.id)} \r\n                 className=\"delete-icon\"\r\n                 />\r\n                 <TiEdit  onClick={()=> setEdit({id: todo.id, value: todo.text} )} \r\n                 className=\"edit-icon\"/>\r\n             </div>\r\n\r\n        </div>\r\n    ))\r\n}\r\n\r\nexport default Todo;\r\n","import React, {useState} from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport Todo from './Todo';\r\n\r\nfunction TodoList() {\r\n    const [todos,setTodos] = useState([]);\r\n\r\n    const addTodo = todo =>{\r\n        if(!todo.text || /^\\s*$/.test(todo.text)){\r\n               return\r\n        }\r\n\r\n        const newTodos = [todo, ...todos]\r\n\r\n        setTodos(newTodos);\r\n        \r\n    };\r\n    \r\n    const updateTodo = (todoId, newValue) =>{\r\n        if(!newValue.text || /^\\s*$/.test(newValue.text)){\r\n            return\r\n     }\r\n     setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item))\r\n     );\r\n    };\r\n\r\n\r\n    const removeTodo = id =>{\r\n        const removeArr = [...todos].filter(todo => todo.id !== id)\r\n\r\n        setTodos(removeArr)\r\n    };\r\n\r\n    \r\n    const completeTodo = id =>{\r\n        let updatedTodos = todos.map(todo => {\r\n            if(todo.id === id){\r\n                todo.iscomplete = !todo.isComplete\r\n            }\r\n            return todo\r\n        })\r\n        setTodos(updatedTodos);\r\n    }\r\n\r\n    \r\n    return (\r\n        <div>\r\n            <h1>What's the plan for Today?</h1>\r\n            <TodoForm onSubmit={addTodo}/>\r\n            <Todo todos={todos} completeTodo={completeTodo} removeTodo={removeTodo} updateTodo={updateTodo} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoList\r\n","import React from 'react';\n\nimport './App.css';\nimport TodoForm from './components/TodoForm';\nimport TodoList from './components/TodoList';\n\n\n\n\n\n\n\nfunction App(){\n  \n  \n\n  return(\n\n\n    <div className=\"todo-app\">\n      \n      <TodoList/>\n      \n    </div>\n  );\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\n\n\n\n\nReactDOM.render(<App/>,document.getElementById('root'));\n\n"],"sourceRoot":""}